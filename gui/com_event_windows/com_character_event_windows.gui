#########################################
# COMMUNITY GUI CHARACTER EVENT WINDOWS #
#########################################

# All character events use the "left_icon" and "right_icon" parameters for passing character scopes to the gui. If you've used a vanilla character event window, this is the same behavior.

########################################

# Copied over from default window
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

########################################

types com_character_window_types {

	### 1 CHARACTER ADVENTURE WINDOW
	type event_window_1char_adventure = event_window {
		name = "event_window_1char_adventure"
		
		blockoverride "event_image_size" {
			size = { 100% 100% }
			parentanchor = center
		}
		
		blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# 1st char
			container = {
				parentanchor = center
				position = { -320 325 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
					}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 500 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_standard', 'camera_event_left', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
			
		}
		
		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2
			
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
	}

	### 2 CHARACTER ADVENTURE WINDOW
	type event_window_2char_adventure = event_window {
		name = "event_window_2char_adventure"
		
		blockoverride "event_image_size" {
			size = { 100% 100% }
			parentanchor = center
		}
		
			blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# 1st char
			container = {
				parentanchor = center
				position = { -380 310 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
					}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 500 520 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_standard', 'camera_event_left', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
			
			# 2nd char
			container = {
				parentanchor = center
				position = { -100 310 }
				datacontext = "[Event.GetIcon('right_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
					}

					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 500 520 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_standard', 'camera_event_right', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
			
		}
		
		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2
			
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
	}
	
	### 2 CHARACTER DISCUSSION WINDOW
	type event_window_2char_discussion = event_window {
		name = "event_window_2char_discussion"
		
		blockoverride "event_image_size" {
			size = { 100% 100% }
			parentanchor = center
		}
		
			blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# 1st char
			container = {
				parentanchor = center
				position = { -325 300 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_standard', 'camera_event_left', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}

			# 2nd char
			container = {
				parentanchor = center
				position = { 325 300 }
				datacontext = "[Event.GetIcon('right_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_standard', 'camera_event_right', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
			
		}
		
		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2
			
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
		blockoverride "event_title_text_options" {
			flowcontainer = {
				minimumsize = { -1 606 }
				maximumsize = { 400 -1 }
				direction = vertical
				spacing = 20
				parentanchor = hcenter|top
				margin = { 20 40 }

				background = {
					using = entry_bg_simple_solid
					margin = { -15 -20 }
					alpha = 0.94
				}

				textbox = {
					name = "description"
					multiline = yes
					autoresize = yes
					minimumsize = { 300 -1 }
					maximumsize = { 360 -1 }
					parentanchor = top|hcenter
					align = hcenter|nobaseline
					raw_text = "#bold [EventWindow.GetDescription]#!"
					margin = { 10 0 }
					using = fontsize_large
				}

				divider_decorative = {}

				textbox = {
					name = "flavortext"
					multiline = yes
					autoresize = yes
					minimumsize = { 00 -1 }
					maximumsize = { 360 -1 }
					parentanchor = top|hcenter
					align = top|left
					raw_text = "#lore [EventWindow.GetFlavor]#!"
					margin = { 30 10 }
				}

				flowcontainer = {
					parentanchor = hcenter|top
					direction = vertical
					using = default_list_position
					datamodel = "[EventWindow.GetOptions]"
					spacing = 5

					item = {
						container = {
							
							widget = {
								visible = "[EventOption.IsHighlightedOption]"
								
								button = {
									size = { 60% 100% }
									parentanchor = hcenter
									using = default_button_primary_action
									onclick = "[EventOption.Select]"
									tooltip = "[EventOption.GetDesc]"
									using = tooltip_ws
									enabled = "[EventOption.IsEnabled]"
									using = confirm_button_sound
								}

								textbox = {
									resizeparent = yes
									minimumsize = { 500 42 }
									maximumsize = { 500 -1 }
									text = "[EventOption.GetText]"
									multiline = yes
									align = hcenter|nobaseline
									autoresize = yes
									margin = { 30 10 }
								}
							}

							widget = {
								visible = "[Not(EventOption.IsHighlightedOption)]"
								
								button = {
									size = { 60% 100% }
									parentanchor = hcenter
									using = default_button_action
									onclick = "[EventOption.Select]"
									tooltip = "EVENT_OPTION_TOOLTIP"
									using = tooltip_ws
									enabled = "[EventOption.IsEnabled]"
									using = confirm_button_sound
								}

								textbox = {
									resizeparent = yes
									minimumsize = { 500 42 }
									maximumsize = { 500 -1 }
									text = "[EventOption.GetText]"
									multiline = yes
									align = hcenter|nobaseline
									autoresize = yes
									margin = { 30 10 }
								}

								### Time until the default option will be picked
								round_progress_default = {
									visible = "[EventOption.IsDefaultOption]"
									parentanchor = right|vcenter
									position = { 0 0.5 }
									size = { 27 27 }
									tooltip = "DEFAULT_EVENT_OPTION"
									value = "[Event.GetPercentageRemainingDays]"

									icon = {
										size = { 26 26 }
										position = { -0.2 -0.2 }
										parentanchor = center
										texture = "gfx/interface/icons/generic_icons/event_default_option.dds"
									}
								}
							}
						}
					}
				}

				button = {
					parentanchor = hcenter
					visible = "[InDebugMode]"
					size = { 480 62 }
					using = default_button
					raw_text = "DEBUG: Open Event in text editor"
					onclick = "[EventWindow.AccessEvent.OpenInEditor]"
				}

				textbox = {
					background = {
						using = default_background
					}
					parentanchor = hcenter
					size = { 480 62 }
					visible = "[InDebugMode]"
					raw_text = "DEBUG: Trigger description"
					tooltip = "[Event.GetTriggerDesc]"
					align = hcenter|nobaseline
				}

				textbox = {
					visible = [InDebugMode]
					parentanchor = hcenter
					align = hcenter
					raw_text = "Event ID: [Event.GetKey|v]"
				}
			}
		}
		
	}
	
	### 2 CHARACTER DUEL WINDOW
	# This event window has an optional progress bar that can be shown under its flavor text
	# Set the variable com_event_window_2char_duel_var on the country
	# Adjust your value to be out of 100; this progressbar goes from 0 to 100

	type event_window_2char_duel = event_window {
		name = "event_window_2char_duel"
		
		blockoverride "event_image_size" {
			size = { 100% 100% }
			parentanchor = center
		}
		
			blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# 1st char
			container = {
				parentanchor = center
				position = { -325 300 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_front_generals_left', 'camera_event_left', 'commander_vs_left', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}

			# 2nd char
			container = {
				parentanchor = center
				position = { 325 300 }
				datacontext = "[Event.GetIcon('right_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_front_generals_right', 'camera_event_right', 'commander_vs_right', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
			
		}
		
		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2
			
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
		blockoverride "event_title_text_options" {
			flowcontainer = {
				minimumsize = { -1 606 }
				maximumsize = { 400 -1 }
				direction = vertical
				spacing = 20
				parentanchor = hcenter|top
				margin = { 20 40 }

				background = {
					using = entry_bg_simple_solid
					margin = { -15 -20 }
					alpha = 0.94
				}

				textbox = {
					name = "description"
					multiline = yes
					autoresize = yes
					minimumsize = { 300 -1 }
					maximumsize = { 360 -1 }
					parentanchor = top|hcenter
					align = hcenter|nobaseline
					raw_text = "#bold [EventWindow.GetDescription]#!"
					margin = { 10 0 }
					using = fontsize_large
				}

				divider_decorative = {}

				textbox = {
					name = "flavortext"
					multiline = yes
					autoresize = yes
					minimumsize = { 00 -1 }
					maximumsize = { 360 -1 }
					parentanchor = top|hcenter
					align = top|left
					raw_text = "#lore [EventWindow.GetFlavor]#!"
					margin = { 30 10 }
				}
				
				widget = {
					parentanchor = hcenter|top
					size = { 300 50 }
					
					visible = "[GetPlayer.MakeScope.Var('com_event_window_2char_duel_var').IsSet]"
					
					background = {
						using = entry_bg
						margin = { 2 2 }
					}
					
					green_progressbar_horizontal = {
						parentanchor = center
						size = { 270 25 }
						
						blockoverride "values" {
							min = 0
							max = 100
							value = "[GetPlayer.MakeScope.Var('com_event_window_2char_duel_var').GetValue]"
						}
					}
				}

				flowcontainer = {
					parentanchor = hcenter|top
					direction = vertical
					using = default_list_position
					datamodel = "[EventWindow.GetOptions]"
					spacing = 5

					item = {
						container = {
							
							widget = {
								visible = "[EventOption.IsHighlightedOption]"
								
								button = {
									size = { 60% 100% }
									parentanchor = hcenter
									using = default_button_primary_action
									onclick = "[EventOption.Select]"
									tooltip = "[EventOption.GetDesc]"
									using = tooltip_ws
									enabled = "[EventOption.IsEnabled]"
									using = confirm_button_sound
								}

								textbox = {
									resizeparent = yes
									minimumsize = { 500 42 }
									maximumsize = { 500 -1 }
									text = "[EventOption.GetText]"
									multiline = yes
									align = hcenter|nobaseline
									autoresize = yes
									margin = { 30 10 }
								}
							}

							widget = {
								visible = "[Not(EventOption.IsHighlightedOption)]"
								
								button = {
									size = { 60% 100% }
									parentanchor = hcenter
									using = default_button_action
									onclick = "[EventOption.Select]"
									tooltip = "EVENT_OPTION_TOOLTIP"
									using = tooltip_ws
									enabled = "[EventOption.IsEnabled]"
									using = confirm_button_sound
								}

								textbox = {
									resizeparent = yes
									minimumsize = { 500 42 }
									maximumsize = { 500 -1 }
									text = "[EventOption.GetText]"
									multiline = yes
									align = hcenter|nobaseline
									autoresize = yes
									margin = { 30 10 }
								}

								### Time until the default option will be picked
								round_progress_default = {
									visible = "[EventOption.IsDefaultOption]"
									parentanchor = right|vcenter
									position = { 0 0.5 }
									size = { 27 27 }
									tooltip = "DEFAULT_EVENT_OPTION"
									value = "[Event.GetPercentageRemainingDays]"

									icon = {
										size = { 26 26 }
										position = { -0.2 -0.2 }
										parentanchor = center
										texture = "gfx/interface/icons/generic_icons/event_default_option.dds"
									}
								}
							}
						}
					}
				}

				button = {
					parentanchor = hcenter
					visible = "[InDebugMode]"
					size = { 480 62 }
					using = default_button
					raw_text = "DEBUG: Open Event in text editor"
					onclick = "[EventWindow.AccessEvent.OpenInEditor]"
				}

				textbox = {
					background = {
						using = default_background
					}
					parentanchor = hcenter
					size = { 480 62 }
					visible = "[InDebugMode]"
					raw_text = "DEBUG: Trigger description"
					tooltip = "[Event.GetTriggerDesc]"
					align = hcenter|nobaseline
				}

				textbox = {
					visible = [InDebugMode]
					parentanchor = hcenter
					align = hcenter
					raw_text = "Event ID: [Event.GetKey|v]"
				}
			}
		}
		
	}
	
	### HIGHLANDER DUEL WINDOW
	type event_window_highlander = event_window {
		name = "event_window_highlander"

		blockoverride "event_image_size" {
			size = { 1280 800 }
			parentanchor = center
		}

		blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# 1st char
			container = {
				parentanchor = center
				position = { -300 300 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
					}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_front_generals_left', 'camera_event_left', 'commander_vs_left', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}

			# 2nd char
			container = {
				parentanchor = center
				position = { 300 300 }
				datacontext = "[Event.GetIcon('right_icon')]"

				character_portrait_base = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
					}
					blockoverride "portrait_icons" {}
					blockoverride "portrait_size" {
						size = { 520 650 }
					}
					blockoverride "portrait_texture" {
						portrait_texture = "[Character.GetAnimatedPortrait('environment_front_generals_right', 'camera_event_right', 'commander_vs_right', GetPortraitRenderSize(PdxGuiWidget.Self))]"
					}
				}
			}
		}
		
		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2
			
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
		blockoverride "event_dlc_icon" {
		}
		
		blockoverride "event_title_text_options" {
			flowcontainer = {
				minimumsize = { -1 200 }
				direction = horizontal
				spacing = 20
				parentanchor = hcenter|bottom
				margin = { 25 40 }

				background = {
					texture = "gfx/interface/backgrounds/tutorial_bg.dds"
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					alpha = 0.94
					
					modify_texture = {
						texture = "gfx/interface/backgrounds/gradient_overlay.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
						alpha = 0.7
					}
					margin = { -15 -20 }
				}
				
				flowcontainer = {
					direction = vertical
					using = default_list_position
					spacing = 5
					margin = {20 30}
				
					textbox = {
						name = "description"
						multiline = yes
						autoresize = yes
						minimumsize = { 480 -1 }
						maximumsize = { 480 -1 }
						parentanchor = top|hcenter
						align = hcenter|nobaseline
						raw_text = "[EventWindow.GetDescription]"
						margin = { 10 0 }
					}
					
					divider_decorative = {}

					textbox = {
						name = "flavortext"
						multiline = yes
						autoresize = yes
						minimumsize = { 600 -1 }
						maximumsize = { 600 -1 }
						parentanchor = top|hcenter
						align = top|hcenter
						raw_text = "#lore [EventWindow.GetFlavor]#!"
						margin = { 30 10 }
					}
				}

				flowcontainer = {
					direction = vertical
					using = default_list_position
					datamodel = "[EventWindow.GetOptions]"
					spacing = 5
					margin = {20 30}

					item = {
						container = {
							widget = {
								visible = "yes"
								
								button = {
									size = { 100% 100% }
									parentanchor = hcenter|bottom
									using = default_button_action
									onclick = "[EventOption.Select]"
									tooltip = "EVENT_OPTION_TOOLTIP"
									using = tooltip_ws
									enabled = "[EventOption.IsEnabled]"
									using = confirm_button_sound
									texture = "gfx/interface/backgrounds/tutorial_bg.dds"
								}

								textbox = {
									resizeparent = yes
									minimumsize = { 400 42 }
									maximumsize = { 400 -1 }
									text = "[EventOption.GetText]"
									multiline = yes
									align = hcenter|nobaseline
									autoresize = yes
									margin = { 30 10 }
								}
							}
						}
					}
				}
			}
		}
		
		flowcontainer = {
			visible = "[Event.IsDLCContent]"
			tooltip = "EVENT_DLC_TOOLTIP"
			spacing = 10
			parentanchor = bottom|left
			position = { 30 -20 }

			icon = {
				size = { 40 40 }
				texture = "gfx/interface/backgrounds/round_frame_dec.dds"
				parentanchor = bottom|left

				icon = {
					size = { 40 40 }
					position = { 2 -2 }

					texture = "[Event.GetDLCIcon]"
					parentanchor = center

				}
			}

			textbox = {
				size = { 150 20 }
				align = left|vcenter
				parentanchor = left|vcenter
				elide = right
				using = fontsize_large
				fontsize_min = 12
				alpha = 0.7

				text = "[Event.GetDLCName]"
			}
		}
	}
	
	### 3 CHARACTER WINDOW
	# This event window is in the style of event_window_1char_tabloid and event_window_2char
	type event_window_3char = event_window {
		name = "event_window_3char"
		
		blockoverride "event_image_size" {
			position = { 3 3 }
			size = { 850 680 }
		}
		
		blockoverride "event_image_content" {
			# bg
			icon = {
				texture = "gfx/event_pictures/3characters.dds"
				alwaystransparent = yes
				position = { 49 40 }
				size = { 550 600 }
				alpha = 0.9
			}

			# 1st char
			container = {
				position = { 76 -52 }
				datacontext = "[Event.GetIcon('left_icon')]"

				character_portrait_duel_01 = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/event_pictures/2characters_mask.dds"
					}
					blockoverride "portrait_icons" {}
				}
			}
			
			# 2nd char
			container = {
				position = { 259 105 }
				datacontext = "[Event.GetIcon('center_icon')]"

				character_portrait_duel_02 = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/event_pictures/2characters_mask.dds"
					}
					blockoverride "portrait_icons" {}
				}
			}

			# 3rd char
			container = {
				position = { 50 255 }
				datacontext = "[Event.GetIcon('right_icon')]"

				character_portrait_duel_01 = {
					visible = "[EventIcon.IsPortrait]"
					datacontext = "[EventIcon.GetCharacter]"
					blockoverride "show_hat" {}
					blockoverride "portrait_mask" {
						mask = "gfx/event_pictures/2characters_mask.dds"
					}
					blockoverride "portrait_icons" {}
				}
			}
		}
	}
	
	### 3 CHARACTER SELECTION WINDOW
	type event_window_3char_selection = event_window {
		name = "event_window_3char_selection"

		blockoverride "event_image_size" {
			size = { 1280 800 }
			parentanchor = center
		}

		blockoverride "event_image_content" {
			# image
			icon = {
				visible = "[Event.HasTexture]"
				texture = "[Event.GetTexture]"
				alwaystransparent = yes
				size = { 100% 100% }
			}

			# animated video
			video_icon = {
				visible = "[Event.HasVideo]"
				video = "[Event.GetVideo]"
				size = { 100% 100% }
				alwaystransparent = yes
				loop = no
			}

			# image
			widget = {
				size = { 100% 100% }
				icon = {
					parentanchor = top
					texture = "gfx/interface/backgrounds/default_bg.dds"
					alwaystransparent = yes
					size = { 100% 70% }

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 1
					}

					modify_texture = {
						using = texture_velvet
					}
				}
				# image
				icon = {
					parentanchor = bottom
					texture = "gfx/interface/backgrounds/default_bg.dds"
					alwaystransparent = yes
					size = { 100% 30% }

					modify_texture = {
						using = texture_velvet
					}
				}
			}
		}

		blockoverride "event_inner_shading" {
			icon = {
				texture = "gfx/interface/event_window/event_inner_frame_fullscreen_clear.dds"
				size = { 100% 100% }
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_right = 0
				spriteborder_top = 0
				texture_density = 2

				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}

		blockoverride "event_dlc_icon" {
		}

		blockoverride "event_title_text_options" {
			flowcontainer = {
				minimumsize = { 1280 -1 }
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				direction = vertical
				parentanchor = bottom
				margin_bottom = 25
				widget = {
					size = { 100% 300 }
					# 1st char
					widget = {
						parentanchor = center
						size = { 300 300 }
						position = { -350 0 }
						datacontext = "[Event.GetIcon('left_icon')]"

						com_event_character_opinion = {}
					}

					# 2nd char
					widget = {
						parentanchor = center
						size = { 300 300 }
						position = { 0 0 }
						datacontext = "[Event.GetIcon('center_icon')]"

						com_event_character_opinion = {}
					}

					# 3rd char
					widget = {
						parentanchor = center
						size = { 300 300 }
						position = { 350 0 }
						datacontext = "[Event.GetIcon('right_icon')]"
						visible = "[EventIcon.IsPortrait]"

						com_event_character_opinion = {}
					}
				}

				flowcontainer = {
					using = clickthrough_blocker
					minimumsize = { 1100 -1 }
					direction = horizontal
					spacing = 20
					parentanchor = hcenter|bottom
					margin = { 25 25 }

					background = {
						using = entry_bg_simple_solid
						margin = { -15 -20 }
					}

					flowcontainer = {
						direction = vertical
						using = default_list_position
						spacing = 5
						margin = {20 30}

						textbox = {
							name = "description"
							multiline = yes
							autoresize = yes
							minimumsize = { 480 -1 }
							maximumsize = { 480 -1 }
							parentanchor = top|hcenter
							align = hcenter|nobaseline
							raw_text = "[EventWindow.GetDescription]"
							margin = { 10 0 }
							margin_bottom = 10
						}

						divider_decorative = {}

						textbox = {
							name = "flavortext"
							multiline = yes
							autoresize = yes
							minimumsize = { 600 -1 }
							maximumsize = { 600 -1 }
							parentanchor = top|hcenter
							align = top|hcenter
							raw_text = "#lore [EventWindow.GetFlavor]#!"
							margin = { 30 0 }
							margin_top = 10
						}
					}

					flowcontainer = {
						direction = vertical
						using = default_list_position
						datamodel = "[EventWindow.GetOptions]"
						spacing = 5
						margin = { 20 30 }

						item = {
							container = {
								widget = {
									visible = "yes"

									button = {
										size = { 100% 100% }
										parentanchor = hcenter|bottom
										using = default_button_action
										onclick = "[EventOption.Select]"
										tooltip = "EVENT_OPTION_TOOLTIP"
										using = tooltip_ws
										enabled = "[EventOption.IsEnabled]"
										using = confirm_button_sound
									}

									textbox = {
										resizeparent = yes
										minimumsize = { 400 42 }
										maximumsize = { 400 -1 }
										text = "[EventOption.GetText]"
										multiline = yes
										align = hcenter|nobaseline
										autoresize = yes
										margin = { 30 10 }
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				visible = "[Event.IsDLCContent]"
				tooltip = "EVENT_DLC_TOOLTIP"
				spacing = 10
				parentanchor = bottom|left
				position = { 15 -5 }

				icon = {
					size = { 40 40 }
					texture = "gfx/interface/backgrounds/round_frame_dec.dds"
					parentanchor = bottom|left

					icon = {
						size = { 40 40 }
						position = { 2 -2 }

						texture = "[Event.GetDLCIcon]"
						parentanchor = center

					}
				}

				textbox = {
					size = { 150 20 }
					align = left|vcenter
					parentanchor = left|vcenter
					elide = right
					using = fontsize_large
					fontsize_min = 12
					alpha = 0.7

					text = "[Event.GetDLCName]"
				}
			}
		}
	}

	type com_event_character_opinion = widget {
		block "character_context" {
			datacontext = "[EventIcon.GetCharacter]"
		}
		size = { 300 300 }

		tooltipwidget = {
			FancyTooltip_Character = {}
		}

		character_portrait_base = {
			size = { 300 300 }
			position = { 0 200 }
			blockoverride "show_hat" {}
			blockoverride "portrait_mask" {
				mask = "gfx/interface/portraits/portrait_mask_no_fade_bottom.dds"
			}
			blockoverride "portrait_icons" {}
			blockoverride "portrait_size" {
				size = { 300 600 }
			}
			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('politician_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}
			blockoverride "tooltip" {}
		}

		# Character Name
		default_header_clean_faded = {
			size = { 100% 40 }
			position = { 0 280 }
			blockoverride "text" {}
			parentanchor = top
			textbox = {
				text = "[Character.GetFullNameNoFormatting]"
				parentanchor = vcenter|hcenter
				position = { 0 -2 }
				autoresize = yes
				max_width = @panel_width_half
				using = fontsize_large
			}
		}
	}
}